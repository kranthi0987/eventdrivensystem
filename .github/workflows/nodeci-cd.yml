name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions block
permissions:
  contents: read
  packages: read
  id-token: write
  checks: write
  deployments: write
  actions: write  # Required for uploading/downloading artifacts

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  SOLUTION_STACK: "64bit Amazon Linux 2023 v6.5.0 running Node.js 22"
  INSTANCE_TYPE: "t3.micro"
  FRONTEND_APP_NAME: event-monitor
  S3_BUCKET_NAME: event-monitor-frontend
  TERRAFORM_STATE_BUCKET: eventdrivensystem-terraform-state
  ARTIFACT_RETENTION_DAYS: 5
  DEPLOYMENT_PACKAGE_PATH: deployments

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Create default success page
        run: |
          # Create public directory if it doesn't exist
          mkdir -p public
          
          # Create the index.html file
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>Deployment Success</title>
              <style>
                body {
                  font-family: Arial, sans-serif;
                  margin: 40px;
                  line-height: 1.6;
                  text-align: center;
                }
                .container {
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  border: 1px solid #ddd;
                  border-radius: 5px;
                }
                .success {
                  color: #28a745;
                }
              </style>
            </head>
            <body>
              <div class="container">
                <h1 class="success">âœ… Deployment Successful!</h1>
                <p>Your application has been successfully deployed.</p>
                <p>Environment: ${EB_ENVIRONMENT_NAME}</p>
                <p>Timestamp: $(date)</p>
                <p>Region: ${AWS_REGION}</p>
              </div>
            </body>
          </html>
          EOF

      - name: Verify public directory
        run: |
          if [ ! -d "public" ]; then
            echo "Error: public directory was not created"
            exit 1
          fi
          
          if [ ! -f "public/index.html" ]; then
            echo "Error: index.html was not created"
            exit 1
          fi
          
          echo "Contents of public directory:"
          ls -la public/
          
          echo "Contents of index.html:"
          cat public/index.html

      - name: Zip deployment package
        run: |
          # Ensure public directory is included
          if [ ! -d "public" ]; then
            echo "Error: public directory not found"
            exit 1
          fi
          
          zip -r $ZIP_FILE_NAME . \
            -x "*.git*" \
            -x "node_modules/*" \
            -x ".github/*" \
            -x ".idea/*" \
            -x "*.DS_Store" \
            -x "apps/$FRONTEND_APP_NAME/*" \
            -x "terraform/*" \
            -i "public/*"  # Explicitly include public directory

      - name: Validate deployment package
        run: |
          if [ ! -f "${{ env.ZIP_FILE_NAME }}" ]; then
            echo "Error: Failed to create deployment package"
            exit 1
          fi
          
          echo "Checking zip contents..."
          if ! unzip -l "${{ env.ZIP_FILE_NAME }}" | grep -q "public/index.html"; then
            echo "Error: public/index.html not found in zip"
            echo "Zip contents:"
            unzip -l "${{ env.ZIP_FILE_NAME }}"
            exit 1
          fi
          
          echo "Deployment package validated successfully"

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ${{ env.ZIP_FILE_NAME }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error
          compression-level: 9

  build-frontend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/event-monitor
          npm ci

      - name: Build frontend
        run: |
          cd apps/event-monitor
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket if not exists
        run: |
            if ! aws s3 ls "s3://$S3_BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
              echo "Syncing files to S3 bucket $S3_BUCKET_NAME"
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            else
              echo "Error: S3 bucket $S3_BUCKET_NAME does not exist. Creating it now..."
              aws s3 mb "s3://$S3_BUCKET_NAME" --region ${{ env.AWS_REGION }}
              
              # Configure bucket policy for public read access
              aws s3api put-bucket-policy \
                --bucket $S3_BUCKET_NAME \
                --policy '{
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::'$S3_BUCKET_NAME'/*"
                    }
                  ]
                }'
              
              # Enable static website hosting
              aws s3 website "s3://$S3_BUCKET_NAME" \
                --index-document index.html \
                --error-document index.html
                
              echo "Bucket created, now syncing files..."
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            fi

  deploy-infrastructure:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .
          merge-multiple: false

      - name: Verify deployment package
        run: |
          if [ ! -f "${{ env.ZIP_FILE_NAME }}" ]; then
            echo "Error: Deployment package not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          echo "Deployment package size: $(ls -lh ${{ env.ZIP_FILE_NAME }} | awk '{print $5}')"

      - name: Upload deployment package to S3
        run: |
          # Create deployments directory in Terraform state bucket
          aws s3api head-bucket --bucket "${TERRAFORM_STATE_BUCKET}" 2>/dev/null || \
            aws s3 mb "s3://${TERRAFORM_STATE_BUCKET}" --region ${AWS_REGION}
          
          # Upload deployment package
          aws s3 cp ${{ env.ZIP_FILE_NAME }} \
            "s3://${TERRAFORM_STATE_BUCKET}/${{ env.ZIP_FILE_NAME }}" \
            --sse AES256
          
          echo "Deployment package uploaded to s3://${TERRAFORM_STATE_BUCKET}/${{ env.ZIP_FILE_NAME }}"
          
          # Verify upload
          if ! aws s3 ls "s3://${TERRAFORM_STATE_BUCKET}/${{ env.ZIP_FILE_NAME }}"; then
            echo "Error: Failed to upload deployment package to S3"
            exit 1
          fi

      - name: Create Terraform State Bucket
        run: |
          if ! aws s3 ls "s3://$TERRAFORM_STATE_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Terraform state bucket already exists"
          else
            echo "Creating Terraform state bucket..."
            aws s3 mb "s3://$TERRAFORM_STATE_BUCKET" --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket $TERRAFORM_STATE_BUCKET --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket $TERRAFORM_STATE_BUCKET --server-side-encryption-configuration '{
              "Rules": [
                {
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }'
            aws s3api put-public-access-block --bucket $TERRAFORM_STATE_BUCKET --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            echo "Terraform state bucket created successfully"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform plan -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Backup Terraform State
        run: |
          # Create necessary directories
          mkdir -p terraform/backups
          mkdir -p terraform/terraform-state-backups
          
          cd terraform
          
          # Create backup script if it doesn't exist
          cat > scripts/backup_state.sh << 'EOF'
          #!/bin/bash
          
          # Create directories if they don't exist
          mkdir -p backups
          mkdir -p terraform-state-backups
          
          # Get current timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="terraform_${TIMESTAMP}.tfstate.backup"
          
          # Create backup of current state
          cp terraform.tfstate "backups/${BACKUP_FILE}"
          
          # Create backup directory in S3 if it doesn't exist
          aws s3api head-bucket --bucket "${TERRAFORM_STATE_BUCKET}" 2>/dev/null || \
            aws s3 mb "s3://${TERRAFORM_STATE_BUCKET}"
          
          # Upload to S3 with encryption
          aws s3 cp "backups/${BACKUP_FILE}" \
            "s3://${TERRAFORM_STATE_BUCKET}/terraform-state-backups/${BACKUP_FILE}" \
            --sse AES256
          
          echo "Backup completed successfully!"
          
          # Cleanup old local backups (keep last 5)
          cd backups && ls -t | tail -n +6 | xargs -r rm --
          
          # List current backups
          echo "Current local backups:"
          ls -la backups/
          
          echo "Current S3 backups:"
          aws s3 ls "s3://${TERRAFORM_STATE_BUCKET}/terraform-state-backups/"
          EOF
          
          # Make script executable
          chmod +x scripts/backup_state.sh
          
          # Run backup script
          ./scripts/backup_state.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TERRAFORM_STATE_BUCKET: ${{ env.TERRAFORM_STATE_BUCKET }}

      - name: Create EB deployment script
        run: |
          cd terraform
          mkdir -p scripts
          cat > scripts/deploy_to_eb.sh << 'EOF'
          #!/bin/bash
          
          # Exit on any error
          set -e
          
          # Get timestamp for version label
          VERSION_LABEL="v$(date +%Y%m%d-%H%M%S)"
          
          echo "Verifying S3 source bundle..."
          if ! aws s3 ls "s3://${TERRAFORM_STATE_BUCKET}/${ZIP_FILE_NAME}"; then
            echo "Error: Source bundle not found in S3!"
            exit 1
          fi
          
          echo "Creating new application version: ${VERSION_LABEL}"
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APPLICATION_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --description "Deployment ${VERSION_LABEL}" \
            --source-bundle "S3Bucket=${TERRAFORM_STATE_BUCKET},S3Key=${ZIP_FILE_NAME}" \
            --process
          
          echo "Updating environment with new version..."
          aws elasticbeanstalk update-environment \
            --application-name "${EB_APPLICATION_NAME}" \
            --environment-name "${EB_ENVIRONMENT_NAME}" \
            --version-label "${VERSION_LABEL}"
          
          # Monitor deployment status
          echo "Monitoring deployment status..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          SLEEP_TIME=10
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ENV_INFO=$(aws elasticbeanstalk describe-environments \
              --application-name "${EB_APPLICATION_NAME}" \
              --environment-names "${EB_ENVIRONMENT_NAME}" \
              --query 'Environments[0]' \
              --output json)
            
            STATUS=$(echo "$ENV_INFO" | jq -r '.Status')
            HEALTH=$(echo "$ENV_INFO" | jq -r '.Health')
            CURRENT_VERSION=$(echo "$ENV_INFO" | jq -r '.VersionLabel')
            
            echo "Status: $STATUS | Health: $HEALTH | Current Version: $CURRENT_VERSION"
            
            if [ "$STATUS" = "Ready" ] && [ "$CURRENT_VERSION" = "${VERSION_LABEL}" ]; then
              if [ "$HEALTH" = "Green" ]; then
                echo "Deployment completed successfully!"
                URL=$(echo "$ENV_INFO" | jq -r '.CNAME')
                echo "Application URL: http://${URL}"
                exit 0
              elif [ "$HEALTH" = "Red" ]; then
                echo "Environment is unhealthy. Checking logs..."
                aws elasticbeanstalk retrieve-environment-info \
                  --environment-name "${EB_ENVIRONMENT_NAME}" \
                  --info-type tail
                exit 1
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "Waiting ${SLEEP_TIME} seconds before next check... (Attempt $ATTEMPT/$MAX_ATTEMPTS)"
              sleep $SLEEP_TIME
            fi
          done
          
          echo "Deployment timed out after $((MAX_ATTEMPTS * SLEEP_TIME)) seconds"
          echo "Final environment status:"
          aws elasticbeanstalk describe-events \
            --environment-name "${EB_ENVIRONMENT_NAME}" \
            --max-items 10
          exit 1
          EOF
          
          chmod +x scripts/deploy_to_eb.sh

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Deploy to Elastic Beanstalk
        run: |
          cd terraform
          ./scripts/deploy_to_eb.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          EB_APPLICATION_NAME: ${{ env.EB_APPLICATION_NAME }}
          EB_ENVIRONMENT_NAME: ${{ env.EB_ENVIRONMENT_NAME }}
          TERRAFORM_STATE_BUCKET: ${{ env.TERRAFORM_STATE_BUCKET }}
          ZIP_FILE_NAME: ${{ env.ZIP_FILE_NAME }}

  check-deployment-status:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Deployment Status and URLs
        run: |
          echo "Checking Elastic Beanstalk Environment Status..."
          
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].Status' \
            --output text)
          
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].Health' \
            --output text)
            
          URL=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Environment Status: $STATUS"
          echo "Environment Health: $HEALTH"
          echo "Application URL: http://$URL"
          
          # Get frontend URL
          FRONTEND_URL=$(aws s3 website s3://${{ env.S3_BUCKET_NAME }} --get | grep -o 'http://.*')
          echo "Frontend URL: $FRONTEND_URL"
          
          if [ "$STATUS" != "Ready" ] || [ "$HEALTH" != "Green" ]; then
            echo "Warning: Environment may have issues. Checking recent events..."
            aws elasticbeanstalk describe-events \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --max-items 10 \
              --query 'Events[*].{Time:EventDate,Message:Message}' \
              --output table
          fi