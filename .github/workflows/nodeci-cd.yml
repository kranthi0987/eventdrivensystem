name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  SOLUTION_STACK: "64bit Amazon Linux 2023 v6.5.0 running Node.js 22"
  INSTANCE_TYPE: "t3.micro"
  FRONTEND_APP_NAME: event-monitor
  S3_BUCKET_NAME: event-monitor-frontend
  TERRAFORM_STATE_BUCKET: eventdrivensystem-terraform-state

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Zip deployment package
        run: |
          zip -r $ZIP_FILE_NAME . -x *.git* node_modules/* *.github/* *.idea/* *.DS_Store apps/$FRONTEND_APP_NAME/*

  build-frontend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/event-monitor
          npm ci

      - name: Build frontend
        run: |
          cd apps/event-monitor
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket if not exists
        run: |
            if ! aws s3 ls "s3://$S3_BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
              echo "Syncing files to S3 bucket $S3_BUCKET_NAME"
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            else
              echo "Error: S3 bucket $S3_BUCKET_NAME does not exist. Creating it now..."
              aws s3 mb "s3://$S3_BUCKET_NAME" --region ${{ env.AWS_REGION }}
              
              # Configure bucket policy for public read access
              aws s3api put-bucket-policy \
                --bucket $S3_BUCKET_NAME \
                --policy '{
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::'$S3_BUCKET_NAME'/*"
                    }
                  ]
                }'
              
              # Enable static website hosting
              aws s3 website "s3://$S3_BUCKET_NAME" \
                --index-document index.html \
                --error-document index.html
                
              echo "Bucket created, now syncing files..."
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            fi

  deploy-infrastructure:
    needs: build-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Terraform State Bucket
        run: |
          if ! aws s3 ls "s3://$TERRAFORM_STATE_BUCKET" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Terraform state bucket already exists"
          else
            echo "Creating Terraform state bucket..."
            aws s3 mb "s3://$TERRAFORM_STATE_BUCKET" --region ${{ env.AWS_REGION }}
            aws s3api put-bucket-versioning --bucket $TERRAFORM_STATE_BUCKET --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket $TERRAFORM_STATE_BUCKET --server-side-encryption-configuration '{
              "Rules": [
                {
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }'
            aws s3api put-public-access-block --bucket $TERRAFORM_STATE_BUCKET --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            echo "Terraform state bucket created successfully"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform plan -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Backup Terraform State
        run: |
          cd terraform
          chmod +x scripts/backup_state.sh
          ./scripts/backup_state.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Deploy to Elastic Beanstalk
        run: |
          cd terraform
          chmod +x scripts/deploy_to_eb.sh
          ./scripts/deploy_to_eb.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          EB_APPLICATION_NAME: ${{ env.EB_APPLICATION_NAME }}
          EB_ENVIRONMENT_NAME: ${{ env.EB_ENVIRONMENT_NAME }}

      - name: Check Deployment Status
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          STATUS=$(aws elasticbeanstalk describe-environments --environment-names ${{ env.EB_ENVIRONMENT_NAME }} --query 'Environments[0].Status' --output text)
          HEALTH=$(aws elasticbeanstalk describe-environments --environment-names ${{ env.EB_ENVIRONMENT_NAME }} --query 'Environments[0].Health' --output text)
          echo "Environment Status: $STATUS"
          echo "Environment Health: $HEALTH"
          
          if [ "$STATUS" != "Ready" ] || [ "$HEALTH" != "Green" ]; then
            echo "Deployment is still in progress or has issues. Checking logs..."
            aws elasticbeanstalk retrieve-environment-info --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --info-type tail
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

  check-deployment-status:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Deployment Status and URLs
        run: |
          echo "Checking Elastic Beanstalk Environment Status..."
          
          STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].Status' \
            --output text)
          
          HEALTH=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].Health' \
            --output text)
            
          URL=$(aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Environment Status: $STATUS"
          echo "Environment Health: $HEALTH"
          echo "Application URL: http://$URL"
          
          # Get frontend URL
          FRONTEND_URL=$(aws s3 website s3://${{ env.S3_BUCKET_NAME }} --get | grep -o 'http://.*')
          echo "Frontend URL: $FRONTEND_URL"
          
          if [ "$STATUS" != "Ready" ] || [ "$HEALTH" != "Green" ]; then
            echo "Warning: Environment may have issues. Checking recent events..."
            aws elasticbeanstalk describe-events \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --max-items 10 \
              --query 'Events[*].{Time:EventDate,Message:Message}' \
              --output table
          fi