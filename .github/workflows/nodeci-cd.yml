name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/  # Path to your Terraform files
  ZIP_FILE_NAME: deploy.zip

jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint

      - name: Build application (if needed)
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Zip deployment package
        run: |
          # Exclude files not needed in production
          zip -r $ZIP_FILE_NAME . -x *.git* node_modules/* *.github/* *.idea/* *.DS_Store
  create-eb-app:
    needs: build-zip
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify/Create EB Application
        run: |
            # Check if application exists
            if ! aws elasticbeanstalk describe-applications \
              --application-names ${{ env.EB_APPLICATION_NAME }} \
              --region ${{ env.AWS_REGION }} &> /dev/null; then
            
              echo "Creating EB application..."
              aws elasticbeanstalk create-application \
                --application-name ${{ env.EB_APPLICATION_NAME }} \
                --description "Event Driven System" \
                --region ${{ env.AWS_REGION }}
            
              # Wait for application to be ready
              sleep 10
            fi

  deploy:
    needs: create-eb-app
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean old versions
        run: |
          aws elasticbeanstalk describe-application-versions \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --query "ApplicationVersions[?VersionLabel!='${{ steps.version.outputs.version }}'].VersionLabel" \
            --output text | xargs -I {} aws elasticbeanstalk delete-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --version-label {} \
            --delete-source-bundle

      - name: Generate unique version label
        id: version
        run: |
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            SHORT_SHA=${GITHUB_SHA:0:7}
            UNIQUE_SUFFIX=$(echo $RANDOM | md5sum | head -c 4)
            echo "version=app-$TIMESTAMP-$SHORT_SHA-$UNIQUE_SUFFIX" >> $GITHUB_OUTPUT

      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "node_modules/*" "tests/*" "*.env*"
          
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.ZIP_FILE_NAME }}
          version_label: ${{ steps.version.outputs.version }}
          wait_for_deployment: true

  deploy-infrastructure:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve 