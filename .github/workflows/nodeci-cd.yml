name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  SOLUTION_STACK: "64bit Amazon Linux 2023 v6.5.0 running Node.js 22"
  INSTANCE_TYPE: "t3.micro"
  FRONTEND_APP_NAME: event-monitor
  S3_BUCKET_NAME: event-monitor-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Zip deployment package
        run: |
          zip -r $ZIP_FILE_NAME . -x *.git* node_modules/* *.github/* *.idea/* *.DS_Store apps/$FRONTEND_APP_NAME/*

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        working-directory: apps/$FRONTEND_APP_NAME
        run: npm ci

      - name: Build frontend
        working-directory: apps/$FRONTEND_APP_NAME
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync apps/$FRONTEND_APP_NAME/dist s3://$S3_BUCKET_NAME --delete
          aws s3 cp apps/$FRONTEND_APP_NAME/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  create-eb-app:
    needs: build-backend
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Elastic Beanstalk Service Role if needed
        run: |
          if ! aws iam get-role --role-name aws-elasticbeanstalk-service-role &> /dev/null; then
            aws iam create-role \
              --role-name aws-elasticbeanstalk-service-role \
              --assume-role-policy-document '{
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "elasticbeanstalk.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "elasticbeanstalk"
                      }
                    }
                  }
                ]
              }'

            aws iam attach-role-policy \
              --role-name aws-elasticbeanstalk-service-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth

            aws iam attach-role-policy \
              --role-name aws-elasticbeanstalk-service-role \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
          fi

      - name: Create EC2 Instance Profile and Role
        run: |
          # Create the role
          aws iam create-role \
            --role-name aws-elasticbeanstalk-ec2-role \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }' || true

          # Attach policies
          aws iam attach-role-policy \
            --role-name aws-elasticbeanstalk-ec2-role \
            --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier || true

          aws iam attach-role-policy \
            --role-name aws-elasticbeanstalk-ec2-role \
            --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier || true

          aws iam attach-role-policy \
            --role-name aws-elasticbeanstalk-ec2-role \
            --policy-arn arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker || true

          # Create instance profile
          aws iam create-instance-profile \
            --instance-profile-name aws-elasticbeanstalk-ec2-role || true

          # Add role to instance profile
          aws iam add-role-to-instance-profile \
            --instance-profile-name aws-elasticbeanstalk-ec2-role \
            --role-name aws-elasticbeanstalk-ec2-role || true

          # Wait for instance profile to be ready
          sleep 10

      - name: Verify Solution Stack
        run: |
          echo "Verifying solution stack exists..."
          aws elasticbeanstalk list-available-solution-stacks \
            --region ${{ env.AWS_REGION }} \
            --query "SolutionStacks[?contains(@, 'Node.js')]" \
            --output table
          echo "Using solution stack: ${{ env.SOLUTION_STACK }}"

      - name: Verify/Create EB Environment
        run: |
          echo "Checking if environment exists..."
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "Environments[?EnvironmentName=='${{ env.EB_ENVIRONMENT_NAME }}'].EnvironmentName" \
            --output text)

          if [ -z "$ENV_EXISTS" ]; then
            echo "Creating EB environment '${{ env.EB_ENVIRONMENT_NAME }}' with stack '${{ env.SOLUTION_STACK }}'..."

            # Create configuration directly in the command
            aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APPLICATION_NAME }} \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --solution-stack-name "${{ env.SOLUTION_STACK }}" \
              --option-settings \
                "[
                  {\"Namespace\":\"aws:autoscaling:launchconfiguration\",\"OptionName\":\"InstanceType\",\"Value\":\"${{ env.INSTANCE_TYPE }}\"},
                  {\"Namespace\":\"aws:elasticbeanstalk:environment\",\"OptionName\":\"EnvironmentType\",\"Value\":\"SingleInstance\"},
                  {\"Namespace\":\"aws:autoscaling:launchconfiguration\",\"OptionName\":\"IamInstanceProfile\",\"Value\":\"aws-elasticbeanstalk-ec2-role\"}
                ]" \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for environment to be ready..."
            while true; do
              STATUS=$(aws elasticbeanstalk describe-environments \
                --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
                --application-name ${{ env.EB_APPLICATION_NAME }} \
                --region ${{ env.AWS_REGION }} \
                --query 'Environments[0].Status' \
                --output text)

              if [ "$STATUS" = "Ready" ]; then
                echo "Environment is ready!"
                break
              elif [ "$STATUS" = "Terminated" ] || [ "$STATUS" = "Terminating" ]; then
                echo "Environment is in $STATUS state. Checking events..."
                aws elasticbeanstalk describe-events \
                  --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
                  --region ${{ env.AWS_REGION }} \
                  --max-items 5 \
                  --query 'Events[*].{Time:EventDate, Message:Message}' \
                  --output table
                exit 1
              fi

              echo "Environment status: $STATUS. Waiting..."
              sleep 30
            done
          else
            echo "Environment '${{ env.EB_ENVIRONMENT_NAME }}' already exists"
          fi

  deploy:
    needs: create-eb-app
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Verify Environment Status
        run: |
            aws elasticbeanstalk describe-environments \
              --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
              --region ${{ env.AWS_REGION }} \
              --query 'Environments[0].{Status:Status, Health:Health}' \
              --output table

      - name: Generate unique version label
        id: version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          UNIQUE_SUFFIX=$(echo $RANDOM | md5sum | head -c 4)
          echo "version=app-$TIMESTAMP-$SHORT_SHA-$UNIQUE_SUFFIX" >> $GITHUB_OUTPUT

      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "node_modules/*" "tests/*" "*.env*"

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.ZIP_FILE_NAME }}
          version_label: ${{ steps.version.outputs.version }}
          wait_for_deployment: true

  deploy-infrastructure:
    needs: [deploy, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform plan -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform apply -auto-approve -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}"