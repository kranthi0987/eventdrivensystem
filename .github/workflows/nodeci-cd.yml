name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  SOLUTION_STACK: "64bit Amazon Linux 2023 v6.5.0 running Node.js 22"
  INSTANCE_TYPE: "t3.micro"

jobs:
  build-zip:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application (if needed)
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Zip deployment package
        run: |
          zip -r $ZIP_FILE_NAME . -x *.git* node_modules/* *.github/* *.idea/* *.DS_Store

  create-eb-app:
    needs: build-zip
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify/Create EB Application
        run: |
          echo "Checking if application exists..."
          APP_EXISTS=$(aws elasticbeanstalk describe-applications \
            --region ${{ env.AWS_REGION }} \
            --query "Applications[?ApplicationName=='${{ env.EB_APPLICATION_NAME }}'].ApplicationName" \
            --output text)
          
          if [ -z "$APP_EXISTS" ]; then
            echo "Creating EB application '${{ env.EB_APPLICATION_NAME }}'..."
            aws elasticbeanstalk create-application \
              --application-name ${{ env.EB_APPLICATION_NAME }} \
              --description "Event Driven System" \
              --region ${{ env.AWS_REGION }}
          
            sleep 5
            echo "Application created successfully!"
          else
            echo "Application '${{ env.EB_APPLICATION_NAME }}' already exists"
          fi

      - name: Verify Solution Stack
        run: |
          echo "Verifying solution stack exists..."
          aws elasticbeanstalk list-available-solution-stacks \
            --region ${{ env.AWS_REGION }} \
            --query "SolutionStacks[?contains(@, 'Node.js')]" \
            --output table
          echo "Using solution stack: ${{ env.SOLUTION_STACK }}"

      - name: Verify/Create EB Environment
        run: |
          echo "Checking if environment exists..."
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query "Environments[?EnvironmentName=='${{ env.EB_ENVIRONMENT_NAME }}'].EnvironmentName" \
            --output text)

          if [ -z "$ENV_EXISTS" ]; then
            echo "Creating EB environment '${{ env.EB_ENVIRONMENT_NAME }}' with stack '${{ env.SOLUTION_STACK }}'..."

            # Create configuration directly in the command
            aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APPLICATION_NAME }} \
              --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
              --solution-stack-name "${{ env.SOLUTION_STACK }}" \
              --option-settings \
                "[
                  {\"Namespace\":\"aws:autoscaling:launchconfiguration\",\"OptionName\":\"InstanceType\",\"Value\":\"${{ env.INSTANCE_TYPE }}\"},
                  {\"Namespace\":\"aws:elasticbeanstalk:environment\",\"OptionName\":\"EnvironmentType\",\"Value\":\"SingleInstance\"}
                ]" \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for environment to be ready..."
            while true; do
              STATUS=$(aws elasticbeanstalk describe-environments \
                --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
                --application-name ${{ env.EB_APPLICATION_NAME }} \
                --region ${{ env.AWS_REGION }} \
                --query 'Environments[0].Status' \
                --output text)

              if [ "$STATUS" = "Ready" ]; then
                echo "Environment is ready!"
                break
              elif [ "$STATUS" = "Terminated" ] || [ "$STATUS" = "Terminating" ]; then
                echo "Environment is in $STATUS state. Checking events..."
                aws elasticbeanstalk describe-events \
                  --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
                  --region ${{ env.AWS_REGION }} \
                  --max-items 5 \
                  --query 'Events[*].{Time:EventDate, Message:Message}' \
                  --output table
                exit 1
              fi

              echo "Environment status: $STATUS. Waiting..."
              sleep 30
            done
          else
            echo "Environment '${{ env.EB_ENVIRONMENT_NAME }}' already exists"
          fi
  deploy:
    needs: create-eb-app
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate unique version label
        id: version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          UNIQUE_SUFFIX=$(echo $RANDOM | md5sum | head -c 4)
          echo "version=app-$TIMESTAMP-$SHORT_SHA-$UNIQUE_SUFFIX" >> $GITHUB_OUTPUT

      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "node_modules/*" "tests/*" "*.env*"

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          region: ${{ env.AWS_REGION }}
          deployment_package: ${{ env.ZIP_FILE_NAME }}
          version_label: ${{ steps.version.outputs.version }}
          wait_for_deployment: true

  deploy-infrastructure:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          cd ${{ env.TERRAFORM_WORKING_DIR }}
          terraform init

      - name: Terraform Validate
        run: |
          cd ${{ env.TERRAFORM_WORKING_DIR }}
          terraform validate

      - name: Terraform Apply
        run: |
          cd ${{ env.TERRAFORM_WORKING_DIR }}
          terraform apply -auto-approve