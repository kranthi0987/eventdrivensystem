name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions block
permissions:
  contents: read
  packages: read
  id-token: write
  checks: write
  deployments: write
  actions: write  # Required for uploading/downloading artifacts

env:
  AWS_REGION: ap-south-1
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  INSTANCE_TYPE: "t3.micro"
  FRONTEND_APP_NAME: event-monitor
  S3_BUCKET_NAME: event-monitor-frontend
  TERRAFORM_STATE_BUCKET: eventdrivensystem-terraform-state
  ARTIFACT_RETENTION_DAYS: 5
  APP_PORT: 8081
  EC2_USER: ec2-user

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Create deployment scripts
        run: |
          mkdir -p scripts
          
          # Create setup script
          cat > scripts/setup.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit on any error
          
          echo "Starting system setup..."
          
          # Update system
          sudo yum update -y
          
          # Install Node.js 22
          echo "Installing Node.js..."
          curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
          sudo yum install -y nodejs
          
          # Verify Node.js installation
          node --version
          npm --version
          
          # Install PM2 globally and ensure it's in PATH
          echo "Installing PM2..."
          sudo npm install -g pm2
          sudo ln -sf /usr/local/bin/pm2 /usr/bin/pm2
          
          # Create app directory
          echo "Setting up application directory..."
          sudo mkdir -p /var/www/app
          sudo chown -R ec2-user:ec2-user /var/www/app
          
          # Install Nginx
          echo "Installing and configuring Nginx..."
          sudo yum install -y nginx
          
          # Configure Nginx
          sudo tee /etc/nginx/conf.d/app.conf << 'NGINX_EOF'
          server {
              listen 80;
              server_name _;
          
              location / {
                  proxy_pass http://localhost:8081;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINX_EOF
          
          # Remove default nginx config
          sudo rm -f /etc/nginx/conf.d/default.conf
          
          # Start Nginx
          sudo systemctl enable nginx
          sudo systemctl start nginx
          
          # Configure firewall
          echo "Configuring firewall..."
          sudo yum install -y firewalld
          sudo systemctl start firewalld
          sudo systemctl enable firewalld
          sudo firewall-cmd --permanent --add-service=http
          sudo firewall-cmd --permanent --add-service=https
          sudo firewall-cmd --reload
          
          echo "Setup completed successfully!"
          EOF
          
          # Create deployment script
          cat > scripts/deploy.sh << 'EOF'
          #!/bin/bash
          set -e  # Exit on any error
          
          echo "Starting deployment..."
          
          APP_DIR="/var/www/app"
          
          # Ensure PM2 is available
          export PATH=$PATH:/usr/local/bin:/usr/bin
          
          echo "Stopping existing application..."
          sudo pm2 stop app || true
          sudo pm2 delete app || true
          
          echo "Cleaning up old files..."
          rm -rf ${APP_DIR}/*
          
          echo "Extracting new files..."
          unzip -o /tmp/deploy.zip -d ${APP_DIR}
          
          echo "Installing dependencies..."
          cd ${APP_DIR}
          npm ci --production
          
          echo "Starting application with PM2..."
          sudo env PATH=$PATH pm2 start npm --name "app" -- start
          sudo env PATH=$PATH pm2 save
          
          echo "Setting up PM2 startup script..."
          sudo env PATH=$PATH pm2 startup systemd -u ec2-user --hp /home/ec2-user
          
          echo "Checking application status..."
          sleep 5  # Wait for the application to start
          
          if sudo pm2 show app | grep -q "online"; then
            echo "Application deployed successfully!"
            exit 0
          else
            echo "Deployment failed - application is not running"
            sudo pm2 logs app
            exit 1
          fi
          EOF
          
          chmod +x scripts/setup.sh scripts/deploy.sh

      - name: Create default success page
        run: |
          mkdir -p public
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>Deployment Success</title>
              <style>
                body {
                  font-family: Arial, sans-serif;
                  margin: 40px;
                  line-height: 1.6;
                  text-align: center;
                }
                .container {
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  border: 1px solid #ddd;
                  border-radius: 5px;
                }
                .success {
                  color: #28a745;
                }
              </style>
            </head>
            <body>
              <div class="container">
                <h1 class="success">âœ… Deployment Successful!</h1>
                <p>Your application has been successfully deployed.</p>
                <p>Timestamp: $(date)</p>
                <p>Region: ${AWS_REGION}</p>
              </div>
            </body>
          </html>
          EOF

      - name: Zip deployment package
        run: |
          zip -r $ZIP_FILE_NAME . \
            -x "*.git*" \
            -x "node_modules/*" \
            -x ".github/*" \
            -x ".idea/*" \
            -x "*.DS_Store" \
            -x "apps/$FRONTEND_APP_NAME/*" \
            -x "terraform/*" \
            -i "public/*" \
            -i "scripts/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: |
            ${{ env.ZIP_FILE_NAME }}
            scripts/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  build-frontend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/event-monitor
          npm ci

      - name: Build frontend
        run: |
          cd apps/event-monitor
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 Bucket if not exists
        run: |
            if ! aws s3 ls "s3://$S3_BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
              echo "Syncing files to S3 bucket $S3_BUCKET_NAME"
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            else
              echo "Error: S3 bucket $S3_BUCKET_NAME does not exist. Creating it now..."
              aws s3 mb "s3://$S3_BUCKET_NAME" --region ${{ env.AWS_REGION }}
              
              # Configure bucket policy for public read access
              aws s3api put-bucket-policy \
                --bucket $S3_BUCKET_NAME \
                --policy '{
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::'$S3_BUCKET_NAME'/*"
                    }
                  ]
                }'
              
              # Enable static website hosting
              aws s3 website "s3://$S3_BUCKET_NAME" \
                --index-document index.html \
                --error-document index.html
                
              echo "Bucket created, now syncing files..."
              aws s3 sync apps/event-monitor/dist s3://$S3_BUCKET_NAME --delete
              aws s3 cp apps/event-monitor/dist/index.html s3://$S3_BUCKET_NAME/index.html --cache-control "no-cache,no-store,must-revalidate"
              echo "Files synced successfully"
            fi

  deploy-infrastructure:
    needs: build-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .

      - name: Upload to S3
        run: |
          aws s3api head-bucket --bucket "${TERRAFORM_STATE_BUCKET}" 2>/dev/null || \
            aws s3 mb "s3://${TERRAFORM_STATE_BUCKET}" --region ${AWS_REGION}
          
          aws s3 cp ${{ env.ZIP_FILE_NAME }} \
            "s3://${TERRAFORM_STATE_BUCKET}/${{ env.ZIP_FILE_NAME }}" \
            --sse AES256

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Generate SSH Key
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          # Generate SSH key pair
          ssh-keygen -t rsa -b 4096 -f ssh_key -N "" -C "ec2-user"
          echo "Generated SSH key pair"
          ls -la ssh_key*

      - name: Cleanup existing resources
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          # Delete key pair if it exists
          aws ec2 delete-key-pair --key-name eventdrivensystem-key || true
          
          # Detach policies from role
          for policy in $(aws iam list-attached-role-policies --role-name eventdrivensystem-ec2-role --query 'AttachedPolicies[*].PolicyArn' --output text); do
            aws iam detach-role-policy --role-name eventdrivensystem-ec2-role --policy-arn "$policy" || true
          done
          
          # Delete instance profile if it exists
          aws iam remove-role-from-instance-profile --instance-profile-name eventdrivensystem-ec2-role --role-name eventdrivensystem-ec2-role || true
          aws iam delete-instance-profile --instance-profile-name eventdrivensystem-ec2-role || true
          
          # Delete role
          aws iam delete-role --role-name eventdrivensystem-ec2-role || true
          
          echo "Waiting for resources to be fully deleted..."
          sleep 10

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          echo "Initializing Terraform..."
          terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          terraform apply -auto-approve \
            -var="frontend_bucket_name=${{ env.S3_BUCKET_NAME }}" \
            -var="app_port=${{ env.APP_PORT }}"

      - name: Deploy application
        run: |
          # Get EC2 instance public IP
          EC2_IP=$(terraform output -state=terraform/terraform.tfstate -raw instance_public_ip)
          
          echo "Waiting for instance to be ready..."
          sleep 60
          
          # Copy deployment package and scripts
          echo "Copying files to EC2..."
          scp -o StrictHostKeyChecking=no \
            -i terraform/ssh_key.pem \
            ${{ env.ZIP_FILE_NAME }} scripts/setup.sh scripts/deploy.sh \
            ${EC2_USER}@${EC2_IP}:/tmp/
          
          # Run setup and deployment
          echo "Running setup and deployment..."
          ssh -o StrictHostKeyChecking=no \
            -i terraform/ssh_key.pem \
            ${EC2_USER}@${EC2_IP} '
              echo "Making scripts executable..."
              chmod +x /tmp/setup.sh /tmp/deploy.sh
              
              echo "Running setup script..."
              sudo /tmp/setup.sh
              
              echo "Running deployment script..."
              /tmp/deploy.sh
            '

      - name: Verify deployment
        run: |
          EC2_IP=$(terraform output -state=terraform/terraform.tfstate -raw instance_public_ip)
          
          echo "Waiting for application to be ready..."
          sleep 30
          
          if curl -s -f "http://${EC2_IP}"; then
            echo "Application is responding successfully!"
          else
            echo "Application is not responding"
            exit 1
          fi