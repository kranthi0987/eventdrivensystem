name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions block
permissions:
  contents: read
  packages: read
  id-token: write
  checks: write
  deployments: write
  actions: write  # Required for uploading/downloading artifacts

env:
  AWS_REGION: ap-south-1
  EB_APPLICATION_NAME: eventdrivensystem
  EB_ENVIRONMENT_NAME: eventdrivensystem-prod
  TERRAFORM_WORKING_DIR: terraform/
  ZIP_FILE_NAME: deploy.zip
  SOLUTION_STACK: "64bit Amazon Linux 2023 v6.5.0 running Node.js 22"
  INSTANCE_TYPE: "t3.micro"
  FRONTEND_APP_NAME: event-monitor
  S3_BUCKET_NAME: event-monitor-frontend
  TERRAFORM_STATE_BUCKET: eventdrivensystem-terraform-state
  ARTIFACT_RETENTION_DAYS: 5
  DEPLOYMENT_PACKAGE_PATH: deployments

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build --if-present

      - name: Run tests
        run: npm test

      - name: Setup deployment files
        run: |
          mkdir -p public .ebextensions .platform/nginx/conf.d
          
          # Create success page
          cat > public/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>Deployment Success</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; text-align: center; }
                .container { max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                .success { color: #28a745; }
              </style>
            </head>
            <body>
              <div class="container">
                <h1 class="success">âœ… Deployment Successful!</h1>
                <p>Your application has been successfully deployed.</p>
                <p>Environment: ${EB_ENVIRONMENT_NAME}</p>
                <p>Timestamp: $(date)</p>
                <p>Region: ${AWS_REGION}</p>
              </div>
            </body>
          </html>
          EOF
          
          # Create package.json if not exists
          if [ ! -f "package.json" ]; then
            cat > package.json << 'EOF'
            {
              "name": "eventdrivensystem",
              "version": "1.0.0",
              "scripts": {
                "start": "node dist/app.js"
              },
              "engines": {
                "node": "22.x"
              }
            }
            EOF
          fi
          
          # Create Procfile
          echo "web: npm start" > Procfile
          
          # Create .npmrc
          echo "engine-strict=true" > .npmrc
          
          # Create EB config
          cat > .ebextensions/00_nginx.config << 'EOF'
          option_settings:
            aws:elasticbeanstalk:environment:proxy:staticfiles:
              /public: /public
            aws:elasticbeanstalk:environment:process:default:
              Command: "npm start"
              Port: "8081"
            aws:elasticbeanstalk:application:environment:
              NODE_ENV: "production"
              PORT: "8081"
          EOF
          
          # Create Nginx config
          cat > .platform/nginx/conf.d/proxy.conf << 'EOF'
          upstream nodejs {
            server 127.0.0.1:8081;
            keepalive 256;
          }
          
          server {
            listen 80;
            server_name localhost;
            
            gzip on;
            gzip_comp_level 4;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            
            location / {
              proxy_pass http://nodejs;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_buffer_size 128k;
              proxy_buffers 4 256k;
              proxy_busy_buffers_size 256k;
            }
            
            location /public {
              alias /var/app/current/public;
              expires 1h;
              add_header Cache-Control public;
              add_header X-Frame-Options SAMEORIGIN;
              add_header X-XSS-Protection "1; mode=block";
              add_header X-Content-Type-Options nosniff;
            }
            
            location /health {
              access_log off;
              return 200 'OK';
              add_header Content-Type text/plain;
            }
          }
          EOF

      - name: Create deployment package
        run: |
          zip -r ${{ env.ZIP_FILE_NAME }} \
            package.json \
            package-lock.json \
            Procfile \
            .npmrc \
            .ebextensions/ \
            .platform/ \
            dist/ \
            public/ \
            node_modules/ \
            --exclude "*.git*" "*.env*" ".github/*" ".idea/*" "*.DS_Store" "apps/*" "terraform/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ${{ env.ZIP_FILE_NAME }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  deploy:
    needs: build-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: .

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Deploy to Elastic Beanstalk
        run: |
          # Upload to S3
          aws s3 cp ${{ env.ZIP_FILE_NAME }} \
            "s3://${{ env.TERRAFORM_STATE_BUCKET }}/${{ env.ZIP_FILE_NAME }}" \
            --sse AES256
          
          # Create version label
          VERSION_LABEL="v$(date +%Y%m%d-%H%M%S)"
          
          # Create application version
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.EB_APPLICATION_NAME }}" \
            --version-label "$VERSION_LABEL" \
            --source-bundle "S3Bucket=${{ env.TERRAFORM_STATE_BUCKET }},S3Key=${{ env.ZIP_FILE_NAME }}" \
            --process
          
          # Wait for processing
          while true; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name "${{ env.EB_APPLICATION_NAME }}" \
              --version-labels "$VERSION_LABEL" \
              --query 'ApplicationVersions[0].Status' \
              --output text)
            
            echo "Version status: $STATUS"
            if [ "$STATUS" = "PROCESSED" ]; then
              break
            elif [ "$STATUS" = "FAILED" ]; then
              exit 1
            fi
            sleep 10
          done
          
          # Update environment
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.EB_ENVIRONMENT_NAME }}" \
            --version-label "$VERSION_LABEL"
          
          # Monitor deployment
          TIMEOUT=600
          START_TIME=$(date +%s)
          
          while true; do
            ENV_INFO=$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ env.EB_ENVIRONMENT_NAME }}" \
              --query 'Environments[0]' \
              --output json)
            
            STATUS=$(echo "$ENV_INFO" | jq -r '.Status')
            HEALTH=$(echo "$ENV_INFO" | jq -r '.Health')
            
            echo "Status: $STATUS | Health: $HEALTH"
            
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "Deployment successful!"
              URL=$(echo "$ENV_INFO" | jq -r '.CNAME')
              echo "Application URL: http://$URL"
              exit 0
            fi
            
            CURRENT_TIME=$(date +%s)
            if [ $((CURRENT_TIME - START_TIME)) -ge $TIMEOUT ]; then
              echo "Deployment timed out"
              exit 1
            fi
            
            sleep 30
          done